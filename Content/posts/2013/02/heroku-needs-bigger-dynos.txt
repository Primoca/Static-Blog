{"MarkdownText":"Recently Rap Genius [posted a critique](http://rapgenius.com/James-somers-herokus-ugly-secret-lyrics) of Herokuâ€™s routing architecture which raised some interesting issues about running a PaaS and elicited an apologetic [response from Heroku](http://blog.heroku.com/archives/2013/2/16/routing_performance_update/). Most of the technical discussion revolves around the routing paradigm namely the merits of random (dumb) routing vs. managed queue (smart) routing. I think the queuing latency problems could also be mitigated by having options for larger dynos.\r\n\r\nThe problem as detailed in the posts above is that with random routing of requests that have different processing latency it is likely that one of the dynos will become saturated and queue its own requests. This is true whether the web server is single threaded or concurrent because the dyno (fixed size 512mb memory) will have limited concurrency (probably 2-3 for a Ruby on Rails app).\r\n\r\nWith large dynos, something akin to an AWS m3.2xlarge instance (8 cores, 30GB RAM) the concurrency could be much higher. You would still have variation in load between dynos but the probability of a dyno being fully saturated with slow requests and producing huge queue latency would be greatly reduced. The thread scheduling inside a multi-core instance acts like a layer of smart routing to compensate for the inefficiencies of random routing.\r\n\r\nIt should be practical for Heroku to offer larger dynos since they run on AWS (and these types of problems are part of why AWS offers more than one instance size in the first place).","Date":"2013-02-16T12:18:33","Tags":"PaaS","TagList":["PaaS"],"Title":"Heroku needs bigger dynos","Author":"Alex Thompson","FullId":"2013/02/heroku-needs-bigger-dynos","DateId":"2013/02/","TitleId":"heroku-needs-bigger-dynos","HtmlText":{},"HtmlShort":{}}