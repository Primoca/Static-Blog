{"MarkdownText":"I just moved this very blog off of WordPress onto my own static blog generator. Source code on [GitHub](http://github.com/Primoca/Static-Blog)\r\n\r\nBackground \r\n-----------\r\nFor websites that don't change every minute, rendering every page request dynamically from a database is inefficient. Caching can help this but introduces the complexity of cache invalidation. Furthermore the hosting and maintenance of an application + database for a simple website like a blog can be tedious. Static content can be served faster, cheaper and simpler which has given rise to static website generators like [Jekyll](http://jekyllrb.com/). \r\n\r\nArchitecture \r\n-------\r\nMost existing static website generators strive to be a standalone tool. I find that a bit too rigid, there's more power and flexibility in decoupling the page rendering from the saving of output. I created a dynamic web app that runs locally then use a generic web crawler to scrape the output. The benefit is I can use the full capability of the web development tools I already know and test and debug just like any other web app. It also opens up more options like you could store content in a DB or deploy the web app to a staging server and scrape it from anywhere.\r\n\r\nFeatures\r\n------------\r\n+ Browser based editing using [Markdown](http://en.wikipedia.org/wiki/Markdown)\r\n+ Indexing of posts by Year/Month and Tags\r\n+ RSS feed\r\n+ Text file based storage\r\n\r\nMarkdown makes writing blog posts very easy and lightweight. Editing in the browser gives me the spell checking of Chrome and allows metadata (Date, Tags) to be in separate HTML input fields away from the main content. The blog posts are stored in text files which is ideal for using source control as a backup mechanism as I have done with [GitHub][GitHub].\r\n\r\n**Pro Tip:** I also use [Chrome Speak](https://chrome.google.com/webstore/detail/chrome-speak/mgpmlgbbboameedkldbfbhoigbabcbhk) to read my posts back to me for proofing. It's much easier to find typos and grammar problems when you listen to the text.\r\n\r\nCrawler\r\n---------\r\nI use [HTTrack](http://www.httrack.com/) to crawl the web app and save the output to static files. Here are the configuration options I changed so the site would generate correctly:\r\n\r\n+ Links -> Attempt to detect all links (even in unknown tags/javascript code) -> **Unchecked**\r\n+ Browser ID -> HTML footer -> **(none)**\r\n+ Experts Only -> Rewrite Links: internal / external -> **Original URL / Original URL**\r\n\r\nHosting\r\n-------------\r\nTo deploy the blog I just zip all the static output files and upload it to [Primoca](http://www.primoca.com). Whenever there is a change (template layout or new post) I just re-crawl and re-upload.\r\n\r\nThe URL structure changed a little from WordPress but it was no problem to setup 301 redirects in Primoca for the old URLs. More blog posts about those features to come.\r\n","Date":"2013-11-07T08:45:44","Tags":"Static_Websites, Blog, .NET","TagList":["Static_Websites","Blog",".NET"],"Title":"Moving from WordPress to Static Blog Generation","Author":"Alex Thompson","FullId":"2013/11/moving-from-wordpress-to-static-blog-generation/","DateId":"2013/11/","TitleId":"moving-from-wordpress-to-static-blog-generation"}